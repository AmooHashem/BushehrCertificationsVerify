{"version":3,"sources":["BlockChain/PublicPrivateKeyPane.js","BlockChain/SignPane.js","BlockChain/VerifyPane.js","BlockChain/MessageGame.js","App.js","serviceWorker.js","index.js"],"names":["rsa","RSA","PublicPrivateKeyPane","props","state","privateKey","publicKey","isLoading","generateNewKey","bind","this","setState","generateKeyPairAsync","then","keyPair","Container","text","Grid","centered","Row","verticalAlign","columns","Column","Segment","Form","style","direction","textAlign","Label","size","color","TextArea","width","height","disabled","value","Button","onClick","Component","crypt","Crypt","isMining","message","messageSignature","error","sign","signature","placeholder","onChange","e","target","Message","Header","VerifyPane","isFirstAttemp","isVerified","newMessage","verify","inverted","MessageGame","pageNumber","SignPane","primary","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e7d6de01.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Container,\n  Grid,\n  Form,\n  Segment,\n  Label,\n  Button,\n  TextArea,\n} from 'semantic-ui-react';\nimport './style.css';\nimport { Crypt, RSA } from 'hybrid-crypto-js';\nvar rsa = new RSA()\n\nclass PublicPrivateKeyPane extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      privateKey: '',\n      publicKey: '',\n      isLoading: false,\n    }\n    this.generateNewKey = this.generateNewKey.bind(this)\n  }\n\n  generateNewKey() {\n    this.setState({ isLoading: true })\n    rsa.generateKeyPairAsync().then(keyPair => {\n      this.setState({ privateKey: keyPair.privateKey })\n      this.setState({ publicKey: keyPair.publicKey })\n      this.setState({ isLoading: false })\n    });\n  }\n\n  render() {\n    const { privateKey, publicKey, isLoading } = this.state;\n\n    return (\n      <Container text>\n        <Grid centered>\n          <Grid.Row verticalAlign='middle' columns={1}>\n            <Grid.Column>\n              <Segment>\n                <Form style={{ direction: 'rtl', textAlign: 'right' }}>\n                  <Label size='big' color='blue'>\n                    {'کلید‌های خصوصی و عمومی'}\n                  </Label>\n                  <br />\n                  <br />\n                  <Label size='medium' color='blue'>\n                    کلید خصوصی:\n                  </Label>\n                  <TextArea style={{ width: '100%', height: '200px', textAlign: 'center' }}\n                    disabled\n                    value={privateKey ? privateKey : 'محل کلید خصوصی شما...'}\n                  />\n                  <br />\n                  <br />\n                  <Label size='medium' color='blue' >\n                    کلید عمومی:\n                  </Label>\n                  <TextArea style={{ width: '100%', height: '200px', textAlign: 'center' }}\n                    disabled\n                    value={publicKey ? publicKey : 'محل کلید عمومی شما...'}\n                  />\n                  <br />\n                  <br />\n                  <Button\n                    disabled={isLoading}\n                    color='green'\n                    style={{ direction: 'rtl' }}\n                    onClick={this.generateNewKey}\n                  >\n                    یه جفت کلید جدید بساز!\n                  </Button>\n                </Form>\n\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container >\n    )\n  }\n}\n\n\nexport default PublicPrivateKeyPane;\n","import React, { Component } from 'react';\nimport {\n  Input,\n  Container,\n  Grid,\n  Form,\n  TextArea,\n  Segment,\n  Label,\n  Button,\n  Message,\n} from 'semantic-ui-react';\nimport './style.css';\nimport { Crypt } from 'hybrid-crypto-js';\n\nvar crypt = new Crypt();\n\nclass PublicPrivateKeyPane extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMining: false,\n      isLoading: false,\n      privateKey: '',\n      message: '',\n      messageSignature: '',\n      error: false,\n    };\n    this.sign = this.sign.bind(this)\n  }\n\n  sign() {\n    this.setState({ isLoading: true })\n    try {\n      var signature = crypt.signature(this.state.privateKey, this.state.message);\n    } catch{\n      this.setState({ error: true })\n    }\n    this.setState({ messageSignature: signature })\n    this.setState({ isLoading: false })\n  }\n\n\n  render() {\n    const { message, privateKey, isLoading, messageSignature, error } = this.state;\n\n    return (\n      <Container text>\n        <Grid centered>\n          <Grid.Row verticalAlign='middle' columns={1}>\n            <Grid.Column>\n              <Segment>\n                <Form style={{ direction: 'rtl', textAlign: 'right' }}>\n                  <Label size='big' color='blue'>\n                    {'امضا'}\n                  </Label>\n                  <br />\n                  <br />\n                  <Label size='medium' color='blue'>\n                    پیغام:\n                  </Label>\n                  <TextArea style={{ width: '100%', height: '100px', textAlign: 'center' }}\n                    value={message}\n                    placeholder='پیغامتو بنویس :)'\n                    onChange={(e) => this.setState({ message: e.target.value })}\n                  />\n                  <br />\n                  <br />\n                  <Label size='medium' color='blue'>\n                    کلید خصوصی:\n                  </Label>\n                  <TextArea style={{ width: '100%', height: '200px', textAlign: 'center' }}\n                    placeholder='محل کلید خصوصی شما...'\n                    onChange={(e) => this.setState({ privateKey: e.target.value })}\n                  />\n                  <br />\n                  <br />\n                  {error && !isLoading &&\n                    <>\n                      <Message\n                        color='red'\n                        style={{ direction: 'rtl' }}\n                      >\n                        <Message.Header>یه مشکلی وجود داره.</Message.Header>\n                        <p>احتمالاً فرمت کلید خصوصیت اشتباهه...</p>\n                      </Message>\n                    </>\n                  }\n                  <Button\n                    disabled={isLoading || !privateKey}\n                    color='green'\n                    style={{ direction: 'rtl' }}\n                    onClick={this.sign}\n                  >\n                    امضاش کن!\n                  </Button>\n                  <br />\n                  <br />\n                  <TextArea style={{ width: '100%', height: '100px', textAlign: 'center' }}\n                    disabled\n                    value={messageSignature ? messageSignature : 'محل امضای پیغام شما...'}\n                  />\n                </Form>\n\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container >\n    )\n  }\n}\n\nexport default PublicPrivateKeyPane;\n","import React, { Component } from 'react';\nimport {\n  Container,\n  Grid,\n  Form,\n  TextArea,\n  Segment,\n  Label,\n  Button,\n  Message,\n} from 'semantic-ui-react';\nimport './style.css';\nimport { Crypt } from 'hybrid-crypto-js';\n\nvar crypt = new Crypt();\n\nclass VerifyPane extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      isFirstAttemp: true,\n      isVerified: false,\n      newMessage: '',\n      publicKey: '',\n      messageSignature: '',\n      error: false,\n    }\n    this.verify = this.verify.bind(this)\n  }\n\n  verify() {\n    this.setState({ isLoading: true, isFirstAttemp: false });\n    try {\n      var verify = crypt.verify(\n        this.state.publicKey,\n        this.state.messageSignature,\n        this.state.newMessage,\n      )\n      this.setState({ isVerified: verify });\n    } catch{\n      this.setState({ error: true })\n    }\n    this.setState({ isLoading: false })\n  }\n\n\n  render() {\n    const {\n      isLoading,\n      isFirstAttemp,\n      publicKey,\n      isVerified,\n      messageSignature,\n      error,\n    } = this.state;\n\n    return (\n      <Container text>\n        <Grid columns={1} verticalAlign='middle' centered>\n          <Grid.Row>\n            <Grid.Column>\n              <Segment\n                inverted={!isFirstAttemp && !error}\n                color={!isFirstAttemp ? isVerified ? 'green' : 'red' : null}\n              >\n                <Form style={{ direction: 'rtl', textAlign: 'right' }}>\n                  <Label size='big' color='blue'>\n                    {'تایید امضا'}\n                  </Label>\n                  <br />\n                  <br />\n                  <Label size='medium' color='blue'>\n                    پیغام:\n                  </Label>\n                  <TextArea style={{ width: '100%', height: '100px', textAlign: 'center' }}\n                    placeholder='پیغامی که میخوای امضاشو چک کنی وارد کن :)'\n                    onChange={(e) => this.setState({ newMessage: e.target.value })}\n                  />\n                  <br />\n                  <br />\n                  <Label size='medium' color='blue'>\n                    کلید عمومی:\n                  </Label>\n                  <TextArea style={{ width: '100%', height: '200px', textAlign: 'center' }}\n                    placeholder='محل کلید عمومی شما...'\n                    onChange={(e) => this.setState({ publicKey: e.target.value })}\n                  />\n                  <br />\n                  <br />\n                  <Label size='medium' color='blue'>\n                    امضای پیغام:\n                  </Label>\n                  <TextArea style={{ width: '100%', height: '100px', textAlign: 'center' }}\n                    placeholder='محل امضای پیغام شما...'\n                    onChange={(e) => this.setState({ messageSignature: e.target.value })}\n                  />\n                  <br />\n                  <br />\n                  {error && !isLoading &&\n                    <>\n                      <Message\n                        color='red'\n                        style={{ direction: 'rtl' }}\n                      >\n                        <Message.Header>یه مشکلی وجود داره.</Message.Header>\n                        <p>احتمالاً یا فرمت کلید عمومیت اشتباهه، یا فرمت امضای پیغامت...</p>\n                      </Message>\n                    </>\n                  }\n                  <Button\n                    disabled={isLoading || !publicKey || !messageSignature}\n                    color='green'\n                    style={{ direction: 'rtl' }}\n                    onClick={this.verify}\n                  >\n                    معتبره؟\n                  </Button>\n                </Form>\n\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container >\n    )\n  }\n}\n\nexport default VerifyPane;\n","import React, { Component } from 'react';\nimport {\n  Container,\n  Button,\n  Grid,\n} from 'semantic-ui-react';\nimport PublicPrivateKeyPane from './PublicPrivateKeyPane'\nimport SignPane from './SignPane'\nimport VerifyPane from './VerifyPane'\nimport './style.css';\n\nclass MessageGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageNumber: 0,\n    }\n  }\n\n  render() {\n    const { pageNumber } = this.state;\n    return (\n      <Container text >\n        <Grid centered style={{ direction: 'rtl' }}>\n          <Grid.Row verticalAlign='middle'>\n            <Grid.Column textAlign='center'>\n              {pageNumber === 0 &&\n                <PublicPrivateKeyPane />\n              }\n              {pageNumber === 1 &&\n                <SignPane />\n              }\n              {pageNumber === 2 &&\n                <VerifyPane />\n              }\n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row verticalAlign='middle'>\n            <Grid.Column textAlign='center'>\n              <Button\n                disabled={pageNumber === 0}\n                primary\n                onClick={\n                  () => this.setState({ pageNumber: 0 })\n                }\n              >\n                کلیدها\n              </Button>\n\n              <Button\n                disabled={pageNumber === 1}\n                primary\n                onClick={\n                  () => this.setState({ pageNumber: 1 })\n                }\n              >\n                امضا\n              </Button>\n\n              <Button\n                disabled={pageNumber === 2}\n                primary\n                onClick={\n                  () => this.setState({ pageNumber: 2 })\n                }\n              >\n                تایید امضا\n              </Button>\n\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n\n      </Container>\n    )\n  }\n}\n\n\nexport default MessageGame;","import React from 'react';\nimport MessageGame from './BlockChain/MessageGame'\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <MessageGame />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}